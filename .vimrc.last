" Always use curr. dir.
set autochdir
let g:netrw_keepdir=0

" Quick throwaway macro
nnoremap Q @q

" Y by default is alias for yy, make it consistent with C and D
map Y y$

" Increase number of tabs opened using `vim -p` or `:tab all`
set tabpagemax=100

" https://github.com/reedes/vim-lexical
let g:lexical#thesaurus = ['~/.vim/thesaurus/mthesaur.txt',]
let g:lexical#thesaurus_key = '<leader>t'

augroup lexical
    autocmd!
    autocmd FileType markdown call lexical#init({'spell': 0})
    autocmd FileType tex call lexical#init({'spell': 0})
augroup END

" .vim/syntax/notes.vim
augroup LocalFileTypeRules
    autocmd!
    autocmd BufNewFile,BufRead *.txt set ft=notes tw=120
    autocmd BufNewFile,BufRead */ansible/*.yml set ft=yaml.ansible
augroup END

" Replace horrible func( arg ) with func(arg) etc
function! FixSurround()
    %s/( \(.*\) )/(\1)/e
    %s/< \(.*\) >/<\1>/e
    %s/\[ \(.*\) \]/[\1]/e
    %s/ )/)/e
    %s/( /(/e
endfunction

augroup RainbowParentheses
    let blacklist = []
    autocmd!
    autocmd VimEnter * if index(blacklist, &ft) < 0 | silent! RainbowParenthesesToggle
    autocmd FileType * if index(blacklist, &ft) < 0 | silent! RainbowParenthesesLoadRound
    autocmd FileType * if index(blacklist, &ft) < 0 | silent! RainbowParenthesesLoadSquare
    autocmd FileType * if index(blacklist, &ft) < 0 | silent! RainbowParenthesesLoadBraces
augroup END

" Syntastic
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler_options = ' -std=c++0x'
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_vim_checkers = ['vint']

" vim-markdown
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_folding_disabled = 1

" Vim Markdown Preview - requires 'grip' Python package
let vim_markdown_preview_github = 1
let vim_markdown_preview_hotkey = '<leader>m'
let vim_markdown_preview_temp_file = 1

" jedi-vim
let g:jedi#popup_on_dot = 0

" goyo + limelight
let g:goyo_width = 120
let g:limelight_conceal_ctermfg = 'gray'

" ansible-vim
let g:ansible_extra_keywords_highlight = 1

" quick-scope - only highlight on pressed keys
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Handle xterm keys even for screen-* TERM env (C-left, S-up etc.)
" https://superuser.com/a/402084/107828
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" Quickly switch between last active buffer
" (Used to be part of timss/vimconf)
nnoremap gf <C-^>

" While modeline used to often be enabled by default, it has historically been
" a source of security/resource vulnerabilities and as such has been disabled
" in some distributions such as Debian
set modeline

" Open all folds by default
set nofoldenable

" Don't treat numbers starting with 0 as octal
set nrformats-=octal

" Enabled together with number to show current line number
" Set vim default numberwidth
set relativenumber
set numberwidth=4

" Quickly toggle sidebar stuff to make remote line copying easier
nnoremap <silent> <Leader>t :set relativenumber!<CR> <bar> :set number!<CR> <bar> :SignifyToggle<CR>
